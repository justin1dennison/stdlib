/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var randu = require( '@stdlib/random/base/randu' );
var abs = require( '@stdlib/math/base/special/abs' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var boxcox = require( '@stdlib/math/base/special/boxcox' );


// FIXTURES //

var data = require( './fixtures/python/data.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof boxcox, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN if provided `NaN`', function test( t ) {
	var b;

	b = boxcox( NaN, 1.0);
	t.equal( isnan( b ), true, 'returns NaN' );
	b = boxcox( 1.0, NaN );
	t.equal( isnan( b ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns `-Infinity` if lambda is negative', function test( t ) {
	var b;
	var x;
	var i;

	for ( i = 0; i < 1e3; i++ ) {
		x = -1.0 * ( (randu()*100.0) + 1.0);
		b = boxcox( 2.3, x );
		t.strictEqual( b, NINF, 'returns -Infinity when lambda is negative' );
	}
	t.end();
});

tape( 'the function returns `NaN` if `x` is negative', function test( t ) {
	var b;
	var x;
	var y;
	var i;

	for ( i = 0; i < 1e3; i++ ) {
		x = -1.0 * ( (randu()*100.0) + 1.0);
		y = ( randu() * 10.0 );
		b = boxcox( x, y );
		t.strictEqual( isnan( b ), true, 'returns NaN');
	}
	t.end();
});

tape( 'the function accurately computes the Box-Cox transformation', function test( t ) {
	var delta;
	var tol;
	var ex;
	var i;
	var b;
	var x;
	var y;

	for ( i = 0; i < data.length; i++ ) {
		x = data.x[i];
		y = data.y[i];
		ex = data.expected[i];
		b = boxcox( x, y );
		if ( b === ex ) {
			t.strictEqual( b, ex, 'returns '+b+'when provided '+x+' and '+y+'.' );
		} else {
			delta = abs( ex - b );
			tol = EPS * abs( ex );
			t.ok( delta <= tol, 'within tolerance. returns '+b+' when provided '+x+' and '+y+'. expected: '+ex+', delta: '+delta+'. tol: ' +tol+'.' );
		}
	}
	t.end();
});
