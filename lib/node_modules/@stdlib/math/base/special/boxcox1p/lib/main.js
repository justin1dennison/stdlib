/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var log1p = require( '@stdlib/math/base/special/log1p' );
var abs = require( '@stdlib/math/base/special/abs' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );


// MAIN //

/**
* Computes the Box-Cox transformation of 1+x.
*
*## Method
*
* -The argument given above in boxcox applies here with the modification
* -that the smallest value produced by log1p is the minimum representable
* -value, rather than eps.  The second condition here prevents unflow
* -when log1p(x) is < eps.
*
* @param {number} x - input value
* @param {number} lambda - power parameter
* @returns {number} Box-Cox transformation of 1+x
*
* @example
* var v = boxcox1p( 1.0, 2.5 );
* // returns ~1.8627
*
* v = boxcox1p( 4.0, 2.5 );
* // returns ~21.9607
*
* v = boxcox1p( 10.0, 2.5 );
* // returns ~160.1246
*
* v = boxcox1p( 2.0, 0.0 );
* // returns ~1.0986
*
* v = boxcox1p( -1.0, 2.5 );
* // returns -0.4
*
* v = boxcox1p( 0.0, -1.0 );
* // returns 0.0
*
* v = boxcox1p( -1.0, -1.0 );
* // returns -Infinity
*/
function boxcox1p( x, lambda ) {
	var lgx;
	if ( isnan( x ) || isnan( lambda ) || x < -1.0 ) {
		return NaN;
	}
	if ( x === -1.0 && lambda < 0.0 ) {
		return NINF;
	}
	lgx = log1p( x );
	if ( abs( lambda ) < 1e-19 ||
	( abs( lgx ) < 1e-289 && abs( lambda ) < 1e273 )) {
		return lgx;
	}
	return expm1( lambda * lgx ) / lambda;
}


// EXPORTS //

module.exports = boxcox1p;
